/**
    Aplicar cualquera de los mixins o clases a
    cualquier elemento que sea un flex container
**/

// Mixin para determinar la direccion de los items

$FlexDirection:(
    c   :   column,
    cr  :   column-reverse,
    r   :   row,
    rr  :   row-reverse
) !default;

@mixin direccion($Direccion){
    @if map-has-key($FlexDirection,$Direccion){
        flex-direction:#{map-get($FlexDirection,$Direccion)};
    }
}

@mixin direccionCss($Direccion,$Breackpoint){
    @if map-has-key($FlexDirection,$Direccion){
        @include MediaQuery($Breackpoint){
            .#{$Breackpoint}-flex-#{Direccion}{
                flex-direction:#{map-get($FlexDirection,$Direccion)};
            }
        }
    }
}

// Mixin para determinar si los items estaran en una linea o no

$FlexWrap:(
    w   :wrap,
    wr  :wrap-reverse,
    nw  :nowrap
) !default;

@mixin wrap($Wrap){
    @if map-has-key($FlexWrap,$Wrap){
        flex-wrap:#{map-get($FlexWrap,$Wrap)};
    }
}

@mixin wrapCss($Wrap,$Breackpoint){
    @if map-has-key($FlexWrap,$Wrap){
        @include MediaQuery($Breackpoints){
            .#{$Breackpoint}-flex-#{$Wrap}{
                flex-wrap:#{map-get($FlexWrap,$Wrap)};
            }
        }
    }
}

// Mixin para la alineacion de los items en el main axis o cross axis

$FlexAlign :(
    Justify     :space-between,
    Distribute  :space-around,
    Start       :flex-start,
    Center      :center,
    End         :flex-end
)!default;

$FlexAxis :(
    cross   :cross,
    main    :main,
    axis    :flex
)!default;

@mixin Align($Axis,$Align){
    @if map-has-key($FlexAxis,$Axis){
        @if $Axis == main{
            @if map-has-key($FlexAlign,$Align){
                justify-content:#{map-get($FlexAlign,$Align)};
            }
        }@else if $Axis == cross{
            @if map-has-key($FlexAlign,$Align){
                @if $Align == Start or $Align == Center or $Align == End{
                    align-items:#{map-get($FlexAlign,$Align)};
                    align-content:#{map-get($FlexAlign,$Align)};
                }@else{
                    @warn "Error valor no permitido";
                }
            }
        }@else if $Axis == axis{
            @warn "Valor no valido para la version sass";
        }
    }
}

@mixin AlignCss($Axis,$Align,$Breackpoint){
    @if map-has-key($FlexAxis,$Axis){
        @if $Axis == main{
            @if map-has-key($FlexAlign,$Align){
                @include MediaQuery($Breackpoint){
                    .#{$Breackpoint}-#{$Axis}-#{$Align}{
                        justify-content:#{map-get($FlexAlign,$Align)};
                    }
                }
            }
        }@else if $Axis == cross{
            @if map-has-key($FlexAxis,$Axis){
                @include MediaQuery($Breackpoint){
                    @if $Align == Start or $Align == Center or $Align == End{
                        .#{$Breackpoint}-#{$Axis}-#{$Align}{
                            align-items:#{map-get($FlexAlign,$Align)};
                            align-content:#{map-get($FlexAlign,$Align)};
                        }
                    }@else{
                        @warn "Error valor no permitido";
                    }
                }
            }
        }@else if $Axis == axis{
            @if map-has-key($FlexAlign,$Align){
                @include MediaQuery($Breackpoint){
                    @if $Align == Center{
                        .#{$Breackpoint}-#{$Axis}-#{$Align}{
                            justify-content:#{map-get($FlexAlign,$Align)};
                            align-items:#{map-get($FlexAlign,$Align)};
                            align-content:#{map-get($FlexAlign,$Align)};
                            text-align:center;
                        }
                    }@else{
                        @warn "Error valor no permitido";
                    }
                }
            }
        }
    }
}
