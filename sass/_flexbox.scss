/// Mapa de variables para el mixin direccion()
/// @group   Flexbox

$FlexDirection:(
    c   :   column,
    cr  :   column-reverse,
    r   :   row,
    rr  :   row-reverse
) !default;

/// Mixin para determinar la direccion de los items
/// Se debe de aplicar al elemento que tenga el mixin Layout() o Container()
/// @group   Flexbox
/// @require {map} $Direccion
/// @param   {map} $Direccion - Variable para optener un valor del mapa $FlexDirection
/// @example scss
///
/// .container{
///     @include direccion(c);
/// }
///
/// @example css
///
/// .container{
///    -ms-flex-direction: column;
///    flex-direction: column;
/// }

@mixin ag-Direccion($Direccion){
    @if map-has-key($FlexDirection,$Direccion){
        flex-direction:#{map-get($FlexDirection,$Direccion)};
    }@else{
        @error "Valor no aceptado por la variable `$Direccion` en el mixin `ag-Direccion()`";
    }
}

@mixin ag-Direccion-css($Direccion,$Breackpoint){
    @if map-has-key($FlexDirection,$Direccion){
        @include MediaQuery($Breackpoint){
            .#{$nameSpace}-Flex-#{$Direccion}-#{$Breackpoint}{
                flex-direction:#{map-get($FlexDirection,$Direccion)};
            }
        }
    }
}

/// Mapa de variables para el mixin wrap()
/// @group   Flexbox

$FlexWrap:(
    w   :wrap,
    wr  :wrap-reverse,
    nw  :nowrap
) !default;

/// Mixin para determinar si los items estaran en una linea o no
/// Se debe de aplicar al elemento que tenga el mixin Layout() o Container()
/// @group   Flexbox
/// @require {map} $Wrap
/// @param   {map} $Wrap - Variable para optener un valor del mapa $FlexWrap
/// @example scss
///
/// .container{
///     @include wrap(w);
/// }
///
/// @example css
///
/// .container{
///     -ms-flex-wrap:wrap-reverse;
///     flex-wrap:wrap-reverse
/// }

@mixin ag-Wrap($Wrap){
    @if map-has-key($FlexWrap,$Wrap){
        flex-wrap:#{map-get($FlexWrap,$Wrap)};
    }@else{
        @error "Valor no aceptado por la variable `$Wrap en el mixin `ag-Wrap()`";
    }
}

@mixin ag-Wrap-css($Wrap,$Breackpoint){
    @if map-has-key($FlexWrap,$Wrap){
        @include MediaQuery($Breackpoint){
            .#{$nameSpace}-Flex-#{$Wrap}-#{$Breackpoint}{
                flex-wrap:#{map-get($FlexWrap,$Wrap)};
            }
        }
    }
}

/// Mapa de variables para el mixin Align()
/// @group   Flexbox

$FlexAlign :(
    Justify     :space-between,
    Distribute  :space-around,
    Start       :flex-start,
    Center      :center,
    End         :flex-end
)!default;

/// Mapa de variables para el mixin Align()
/// @group   Flexbox

$FlexAxis :(
    cross   :cross,  //Si los items se alinearan al eje cross
    main    :main,   //Si los items se alinearan al eje main
    axis    :flex    //Si los items se alinearan en los 2 ejes
)!default;

/// Mixin para la alineacion de los items en el main axis o cross axis
/// Se debe de aplicar al elemento que tenga el mixin Layout() o Container()
/// @group   Flexbox
/// @require {map} $Wrap
/// @param   {map} $Axis  - Variable para optener un valor del mapa $FlexAxis
/// @param   {map} $Align - Variable para optener un valor del mapa $FlexAlign
/// @example scss
///
/// .container{
///     @include Align(cross,Justify);
/// }
///
/// @example css
///
/// .container{
///   -ms-flex-pack: justify;
///   justify-content: space-between;
/// }

@mixin ag-Align($Axis,$Align){
    @if map-has-key($FlexAxis,$Axis){
        @if $Axis == main{
            @if map-has-key($FlexAlign,$Align){
                justify-content:#{map-get($FlexAlign,$Align)};
            }@else{
                @error "Valor no aceptado por la variable `$Align` en el mixin `ag-Align()`";
            }
        }@else if $Axis == cross{
            @if map-has-key($FlexAlign,$Align){
                @if $Align == Start or $Align == Center or $Align == End{
                    align-items:#{map-get($FlexAlign,$Align)};
                    align-content:#{map-get($FlexAlign,$Align)};
                }@else{
                    @error "Valores no aceptados por las propiedades `align-items` y `align-content` en el mixin `ag-Align()`";
                }
            }
        }@else if $Axis == axis{
            @if map-has-key($FlexAlign,$Align){
                @if $Align == Center{
                    justify-content:#{map-get($FlexAlign,$Align)};
                    align-items:#{map-get($FlexAlign,$Align)};
                    align-content:#{map-get($FlexAlign,$Align)};
                    text-align:center;
                }@else{
                    @error "Valores no aceptados por la variable `$Align` cuando el valor de la variable `$Axis` es axis en el mixin `ag-Align()`";
                }
            }
        }@else{
            @error "Valor no aceptado por la variable `$Axis` en el mixin `ag-Align()`";
        }
    }
}

@mixin ag-Align-css($Axis,$Align,$Breackpoint){
    @if map-has-key($FlexAxis,$Axis){
        @if $Axis == main{
            @if map-has-key($FlexAlign,$Align){
                @include MediaQuery($Breackpoint){
                    .#{$nameSpace}-#{$Axis}-#{$Align}-#{$Breackpoint}{
                        justify-content:#{map-get($FlexAlign,$Align)};
                    }
                }
            }
        }@else if $Axis == cross{
            @if map-has-key($FlexAxis,$Axis){
                @include MediaQuery($Breackpoint){
                    @if $Align == Start or $Align == Center or $Align == End{
                        .#{$nameSpace}-#{$Axis}-#{$Align}-#{$Breackpoint}{
                            align-items:#{map-get($FlexAlign,$Align)};
                            align-content:#{map-get($FlexAlign,$Align)};
                        }
                    }
                }
            }
        }@else if $Axis == axis{
            @if map-has-key($FlexAlign,$Align){
                @include MediaQuery($Breackpoint){
                    @if $Align == Center{
                        .#{$nameSpace}-#{$Axis}-#{$Align}-#{$Breackpoint}{
                            justify-content:#{map-get($FlexAlign,$Align)};
                            align-items:#{map-get($FlexAlign,$Align)};
                            align-content:#{map-get($FlexAlign,$Align)};
                            text-align:center;
                        }
                    }
                }
            }
        }
    }
}
